# File: OutlawRpg-main/outlaw/cogs/relic_commands.py
# Crie este novo arquivo dentro da pasta 'cogs'.

import discord
from discord.ext import commands, tasks
from discord import app_commands # IMPORTANTE: Adicione esta linha para comandos de barra
from discord.ui import Button, View
import asyncio
import time
from datetime import timedelta

# Importar de seus mÃ³dulos de gerenciamento de dados e lÃ³gica
from data_manager import ( Â 
Â  Â  get_player_data,
Â  Â  save_data,
Â  Â  add_relic_to_inventory,
Â  Â  add_user_money,
Â  Â  add_user_energy,
Â  Â  check_and_add_keys,
Â  Â  get_time_until_next_key_claim,
)

from game_logic.relic_mechanics import get_random_relic Â 
from relics import ( Â 
Â  Â  relics,
) Â # Importa a lista de relÃ­quias para o /inventory


class RelicCommands(commands.Cog):
Â  Â  def __init__(self, bot):
Â  Â  Â  Â  self.bot = bot
Â  Â  Â  Â  # Inicia a tarefa de geraÃ§Ã£o de chaves. Ela verificarÃ¡ a cada minuto.
Â  Â  Â  Â  self.key_generation_task.start()

Â  Â  def cog_unload(self):
Â  Â  Â  Â  # Cancela a tarefa ao descarregar o cog para evitar que ela continue em background
Â  Â  Â  Â  self.key_generation_task.cancel()

Â  Â  @tasks.loop(minutes=1) Â # Verifica a cada minuto para adicionar chaves
Â  Â  async def key_generation_task(self):
Â  Â  Â  Â  """
Â  Â  Â  Â  Tarefa em loop que verifica e adiciona chaves para todos os usuÃ¡rios
Â  Â  Â  Â  cujo cooldown de 1 hora expirou.
Â  Â  Â  Â  """
Â  Â  Â  Â  all_user_data = get_player_data(
Â  Â  Â  Â  Â  Â  "all"
Â  Â  Â  Â  ) Â # Retorna a referÃªncia ao dicionÃ¡rio global player_database

Â  Â  Â  Â  # Cria uma lista de user_ids para iterar para evitar "dictionary changed size during iteration"
Â  Â  Â  Â  # se o save_data for chamado dentro do loop (que ele Ã©).
Â  Â  Â  Â  user_ids_to_check = list(all_user_data.keys())

Â  Â  Â  Â  for user_id_str in user_ids_to_check:
Â  Â  Â  Â  Â  Â  user_id = int(user_id_str)
Â  Â  Â  Â  Â  Â  keys_added = check_and_add_keys(user_id) Â # Esta funÃ§Ã£o jÃ¡ salva os dados

Â  Â  Â  Â  Â  Â  if keys_added > 0:
Â  Â  Â  Â  Â  Â  Â  Â  print(f"Adicionadas {keys_added} chaves para o usuÃ¡rio {user_id}")
Â  Â  Â  Â  Â  Â  Â  Â  # Opcional: enviar DM ao usuÃ¡rio sobre novas chaves.
Â  Â  Â  Â  Â  Â  Â  Â  # Cuidado com o rate limit do Discord para muitos usuÃ¡rios.
Â  Â  Â  Â  Â  Â  Â  Â  user = self.bot.get_user(user_id) Â # Tenta obter da cache primeiro
Â  Â  Â  Â  Â  Â  Â  Â  if user is None:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  user = await self.bot.fetch_user(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  user_id
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) Â # Se nÃ£o estiver na cache, busca
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  except discord.NotFound:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  user = None Â # UsuÃ¡rio nÃ£o existe mais

Â  Â  Â  Â  Â  Â  Â  Â  if user:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Para slash commands, o prefixo nÃ£o Ã© relevante aqui.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Apenas mencionar o comando /bau
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await user.send(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  f"VocÃª recebeu {keys_added} chaves de baÃº! Use-as com `/bau`."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  except discord.Forbidden:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  print(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  f"NÃ£o foi possÃ­vel enviar DM para {user.name} ({user.id})."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  except Exception as e:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  print(f"Erro ao enviar DM para {user.name} ({user.id}): {e}")

Â  Â  @key_generation_task.before_loop
Â  Â  async def before_key_generation(self):
Â  Â  Â  Â  """Aguarda o bot estar pronto antes de iniciar a tarefa."""
Â  Â  Â  Â  await self.bot.wait_until_ready()
Â  Â  Â  Â  print("Tarefa de geraÃ§Ã£o de chaves iniciada e aguardando bot pronto.")

Â  Â  @app_commands.command(name="bau", description="Mostra o baÃº e permite abri-lo.")
Â  Â  async def open_chest(self, interaction: discord.Interaction): # MudanÃ§a de ctx para interaction
Â  Â  Â  Â  user_id = str(interaction.user.id) # MudanÃ§a de ctx.author.id para interaction.user.id

Â  Â  Â  Â  # Garante que as chaves sÃ£o atualizadas antes de exibir o status
Â  Â  Â  Â  check_and_add_keys(interaction.user.id) # MudanÃ§a de ctx.author.id para interaction.user.id
Â  Â  Â  Â  user_data = get_player_data(
Â  Â  Â  Â  Â  Â  user_id
Â  Â  Â  Â  ) Â # Recarrega (ou obtÃ©m) para ter as chaves atualizadas

Â  Â  Â  Â  keys_available = user_data.get("keys", 0)
Â  Â  Â  Â  time_remaining_seconds = get_time_until_next_key_claim(interaction.user.id) # MudanÃ§a de ctx.author.id para interaction.user.id

Â  Â  Â  Â  # Formata o tempo restante
Â  Â  Â  Â  if time_remaining_seconds > 0:
Â  Â  Â  Â  Â  Â  td = timedelta(seconds=int(time_remaining_seconds))
Â  Â  Â  Â  Â  Â  hours, remainder = divmod(td.seconds, 3600)
Â  Â  Â  Â  Â  Â  minutes, seconds = divmod(remainder, 60)
Â  Â  Â  Â  Â  Â  time_str = f"Novas chaves em **{hours}h {minutes}m {seconds}s**."
Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  time_str = "VocÃª pode reivindicar novas chaves agora!"

Â  Â  Â  Â  embed = discord.Embed(
Â  Â  Â  Â  Â  Â  title="Um BaÃº Misterioso Aparece!",
Â  Â  Â  Â  Â  Â  description=f"VocÃª tem **{keys_available}** chaves disponÃ­veis.\n\n{time_str}",
Â  Â  Â  Â  Â  Â  color=discord.Color.gold(),
Â  Â  Â  Â  )
Â  Â  Â  Â  # Substitua 'URL_DA_IMAGEM_DO_BAU' pela URL de uma imagem do baÃº
Â  Â  Â  Â  embed.set_image(
Â  Â  Â  Â  Â  Â  url="https://i.imgur.com/example_chest_image.png"
Â  Â  Â  Â  ) Â # **IMPORTANTE: Mude para a sua imagem!**
Â  Â  Â  Â  embed.set_footer(
Â  Â  Â  Â  Â  Â  text=f"Use /inventory para ver suas relÃ­quias." # MudanÃ§a de command_prefix para /inventory
Â  Â  Â  Â  )

Â  Â  Â  Â  # Classe interna para o botÃ£o de interaÃ§Ã£o
Â  Â  Â  Â  class ChestButton(Button):
Â  Â  Â  Â  Â  Â  # O 'ctx' original nÃ£o estÃ¡ mais disponÃ­vel diretamente aqui,
Â  Â  Â  Â  Â  Â  # entÃ£o a verificaÃ§Ã£o de autor Ã© feita com interaction.user.id
Â  Â  Â  Â  Â  Â  # O 'parent_cog_ref' ainda Ã© necessÃ¡rio.
Â  Â  Â  Â  Â  Â  def __init__(self, label, style, custom_id, parent_cog_ref, original_author_id):
Â  Â  Â  Â  Â  Â  Â  Â  super().__init__(label=label, style=style, custom_id=custom_id)
Â  Â  Â  Â  Â  Â  Â  Â  self.parent_cog = parent_cog_ref Â # ReferÃªncia ao cog para acessar mÃ©todos como _get_tier_color
Â  Â  Â  Â  Â  Â  Â  Â  self.original_author_id = original_author_id # Guarda o ID do autor original

Â  Â  Â  Â  Â  Â  async def callback(self, interaction: discord.Interaction):
Â  Â  Â  Â  Â  Â  Â  Â  # Garante que apenas o usuÃ¡rio que invocou o comando pode usar o botÃ£o
Â  Â  Â  Â  Â  Â  Â  Â  if interaction.user.id != self.original_author_id: # Usa o ID do autor original
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await interaction.response.send_message(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Este baÃº nÃ£o Ã© seu para abrir!", ephemeral=True
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return

Â  Â  Â  Â  Â  Â  Â  Â  user_id_btn = str(interaction.user.id)
Â  Â  Â  Â  Â  Â  Â  Â  user_data_btn = get_player_data(user_id_btn) Â # ObtÃ©m dados atualizados

Â  Â  Â  Â  Â  Â  Â  Â  if user_data_btn.get("keys", 0) <= 0:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await interaction.response.send_message(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "VocÃª nÃ£o tem chaves para abrir este baÃº!", ephemeral=True
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return

Â  Â  Â  Â  Â  Â  Â  Â  # Consome uma chave
Â  Â  Â  Â  Â  Â  Â  Â  user_data_btn["keys"] = user_data_btn.get("keys", 0) - 1
Â  Â  Â  Â  Â  Â  Â  Â  save_data() Â # Salva a alteraÃ§Ã£o imediatamente

Â  Â  Â  Â  Â  Â  Â  Â  # Sorteia a relÃ­quia
Â  Â  Â  Â  Â  Â  Â  Â  gained_relic = get_random_relic()
Â  Â  Â  Â  Â  Â  Â  Â  add_relic_to_inventory(user_id_btn, gained_relic["nome"])
Â  Â  Â  Â  Â  Â  Â  Â  add_user_money(user_id_btn, gained_relic["valor_moedas"])
Â  Â  Â  Â  Â  Â  Â  Â  add_user_energy(user_id_btn, gained_relic["energia_concedida"])

Â  Â  Â  Â  Â  Â  Â  Â  # Cria o embed de recompensa
Â  Â  Â  Â  Â  Â  Â  Â  reward_embed = discord.Embed(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title=f"VocÃª Abriu o BaÃº e Ganhou!",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  description=f"ðŸŽ‰ ParabÃ©ns! VocÃª obteve a relÃ­quia: **{gained_relic['nome']}**!\n\n"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  f"**Tier:** {gained_relic['tier']}\n"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  f"**Valor:** {gained_relic['valor_moedas']} moedas\n"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  f"**Energia:** {gained_relic['energia_concedida']} pontos\n"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  f"**Chance de ObtenÃ§Ã£o:** {gained_relic['chance_obter_percentual']}%",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color=self.parent_cog._get_tier_color(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  gained_relic["tier"]
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ), Â # Usa o mÃ©todo do cog
Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  # VocÃª pode adicionar uma imagem para a relÃ­quia aqui se tiver URLs para cada uma
Â  Â  Â  Â  Â  Â  Â  Â  # Exemplo: reward_embed.set_thumbnail(url=gained_relic.get("imagem_url", "URL_PADRAO_RELIQUIA"))

Â  Â  Â  Â  Â  Â  Â  Â  # Atualiza a descriÃ§Ã£o do embed original do baÃº para refletir as chaves restantes
Â  Â  Â  Â  Â  Â  Â  Â  # Primeiro, recarrega os dados do usuÃ¡rio para ter o estado mais recente (apÃ³s uso da chave)
Â  Â  Â  Â  Â  Â  Â  Â  user_data_updated = get_player_data(user_id_btn)
Â  Â  Â  Â  Â  Â  Â  Â  keys_available_updated = user_data_updated.get("keys", 0)
Â  Â  Â  Â  Â  Â  Â  Â  time_remaining_updated = get_time_until_next_key_claim(user_id_btn)

Â  Â  Â  Â  Â  Â  Â  Â  if time_remaining_updated > 0:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  td_updated = timedelta(seconds=int(time_remaining_updated))
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  hours_updated, remainder_updated = divmod(td_updated.seconds, 3600)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  minutes_updated, seconds_updated = divmod(remainder_updated, 60)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  time_str_updated = f"Novas chaves em **{hours_updated}h {minutes_updated}m {seconds_updated}s**."
Â  Â  Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  time_str_updated = "VocÃª pode reivindicar novas chaves agora!"

Â  Â  Â  Â  Â  Â  Â  Â  # Acessa o embed da mensagem original atravÃ©s do interaction
Â  Â  Â  Â  Â  Â  Â  Â  original_embed = interaction.message.embeds[0]
Â  Â  Â  Â  Â  Â  Â  Â  original_embed.description = f"VocÃª tem **{keys_available_updated}** chaves disponÃ­veis.\n\n{time_str_updated}"

Â  Â  Â  Â  Â  Â  Â  Â  # Edita a mensagem original do baÃº
Â  Â  Â  Â  Â  Â  Â  Â  await interaction.message.edit(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  embed=original_embed, view=self.view
Â  Â  Â  Â  Â  Â  Â  Â  ) Â # view Ã© a view que contÃ©m este botÃ£o
Â  Â  Â  Â  Â  Â  Â  Â  await interaction.followup.send(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  embed=reward_embed
Â  Â  Â  Â  Â  Â  Â  Â  ) Â # Envia a recompensa como uma nova mensagem

Â  Â  Â  Â  # Cria a view com o botÃ£o
Â  Â  Â  Â  view = View(timeout=180) Â # Timeout para o botÃ£o (ex: 3 minutos)
Â  Â  Â  Â  # Passa a referÃªncia do cog e o ID do autor original para a classe do botÃ£o
Â  Â  Â  Â  view.add_item(
Â  Â  Â  Â  Â  Â  ChestButton(
Â  Â  Â  Â  Â  Â  Â  Â  "Abrir BaÃº", discord.ButtonStyle.green, "open_chest_button", self, interaction.user.id
Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  )

Â  Â  Â  Â  # Envia a mensagem do baÃº
Â  Â  Â  Â  await interaction.response.send_message(embed=embed, view=view) # MudanÃ§a de ctx.send para interaction.response.send_message

Â  Â  def _get_tier_color(self, tier):
Â  Â  Â  Â  """Retorna uma cor para o embed baseada no tier da relÃ­quia."""
Â  Â  Â  Â  colors = {
Â  Â  Â  Â  Â  Â  "BÃ¡sica": discord.Color.light_grey(),
Â  Â  Â  Â  Â  Â  "Comum": discord.Color.dark_grey(),
Â  Â  Â  Â  Â  Â  "Incomum": discord.Color.green(),
Â  Â  Â  Â  Â  Â  "Rara": discord.Color.blue(),
Â  Â  Â  Â  Â  Â  "Ã‰pica": discord.Color.purple(),
Â  Â  Â  Â  Â  Â  "MÃ­tica": discord.Color.red(),
Â  Â  Â  Â  }
Â  Â  Â  Â  return colors.get(tier, discord.Color.default())

Â  Â  @app_commands.command( # MudanÃ§a de commands.command para app_commands.command
Â  Â  Â  Â  name="inventory",
Â  Â  Â  Â  description="Mostra suas relÃ­quias obtidas.", # help se torna description para slash commands
Â  Â  )
Â  Â  # Aliases (como 'inv', 'reliquias') nÃ£o sÃ£o suportados diretamente em app_commands.command
Â  Â  # Se precisar deles, vocÃª teria que criar comandos slash separados para cada um
Â  Â  # que chamem a mesma lÃ³gica (e registrar cada um).
Â  Â  async def show_inventory(self, interaction: discord.Interaction): # MudanÃ§a de ctx para interaction
Â  Â  Â  Â  user_id = str(interaction.user.id) # MudanÃ§a de ctx.author.id para interaction.user.id
Â  Â  Â  Â  user_data = get_player_data(user_id)
Â  Â  Â  Â  inventory = user_data.get("relics_inventory", [])

Â  Â  Â  Â  if not inventory:
Â  Â  Â  Â  Â  Â  embed = discord.Embed(
Â  Â  Â  Â  Â  Â  Â  Â  title="Seu InventÃ¡rio de RelÃ­quias",
Â  Â  Â  Â  Â  Â  Â  Â  description="VocÃª ainda nÃ£o possui nenhuma relÃ­quia. Use `/bau` para tentar a sorte!",
Â  Â  Â  Â  Â  Â  Â  Â  color=discord.Color.blue(),
Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  # Conta a ocorrÃªncia de cada relÃ­quia para exibir de forma organizada
Â  Â  Â  Â  Â  Â  relic_counts = {}
Â  Â  Â  Â  Â  Â  for relic_name in inventory:
Â  Â  Â  Â  Â  Â  Â  Â  relic_counts[relic_name] = relic_counts.get(relic_name, 0) + 1

Â  Â  Â  Â  Â  Â  # Para ordenar e exibir o tier, precisamos da lista 'relics' completa aqui
Â  Â  Â  Â  Â  Â  # Criar um dicionÃ¡rio para mapear nome da relÃ­quia para o objeto completo (mais eficiente)
Â  Â  Â  Â  Â  Â  relics_map = {relic["nome"]: relic for relic in relics}

Â  Â  Â  Â  Â  Â  # Prepara a lista de itens para exibiÃ§Ã£o, incluindo o tier
Â  Â  Â  Â  Â  Â  display_items = []
Â  Â  Â  Â  Â  Â  for item in relic_counts.items():
Â  Â  Â  Â  Â  Â  Â  Â  relic_name = item[0]
Â  Â  Â  Â  Â  Â  Â  Â  count = item[1]
Â  Â  Â  Â  Â  Â  Â  Â  relic_info = relics_map.get(relic_name)
Â  Â  Â  Â  Â  Â  Â  Â  if relic_info:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  display_items.append(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {"name": relic_name, "count": count, "tier": relic_info["tier"]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  Â  Â  # Opcional: Ordenar por tier (MÃ­tica -> Ã‰pica -> Rara -> Incomum -> Comum -> BÃ¡sica)
Â  Â  Â  Â  Â  Â  tier_order = {
Â  Â  Â  Â  Â  Â  Â  Â  "MÃ­tica": 6,
Â  Â  Â  Â  Â  Â  Â  Â  "Ã‰pica": 5,
Â  Â  Â  Â  Â  Â  Â  Â  "Rara": 4,
Â  Â  Â  Â  Â  Â  Â  Â  "Incomum": 3,
Â  Â  Â  Â  Â  Â  Â  Â  "Comum": 2,
Â  Â  Â  Â  Â  Â  Â  Â  "BÃ¡sica": 1,
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  display_items.sort(key=lambda x: tier_order.get(x["tier"], 0), reverse=True)

Â  Â  Â  Â  Â  Â  inventory_text = ""
Â  Â  Â  Â  Â  Â  for item in display_items:
Â  Â  Â  Â  Â  Â  Â  Â  inventory_text += (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  f"- **{item['name']}** ({item['tier']}) x{item['count']}\n"
Â  Â  Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  Â  Â  embed = discord.Embed(
Â  Â  Â  Â  Â  Â  Â  Â  title="Seu InventÃ¡rio de RelÃ­quias",
Â  Â  Â  Â  Â  Â  Â  Â  description=inventory_text,
Â  Â  Â  Â  Â  Â  Â  Â  color=discord.Color.blue(),
Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  await interaction.response.send_message(embed=embed) # MudanÃ§a de ctx.send para interaction.response.send_message


async def setup(bot):
Â  Â  await bot.add_cog(RelicCommands(bot))